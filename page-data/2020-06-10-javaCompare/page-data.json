{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-06-10-javaCompare/","result":{"data":{"markdownRemark":{"html":"<h2>목적</h2>\n<p>얼마전 자바스크립트에서 사용하던 Compare 함수를 자바에서도 있나 찾아보던중 Comparable과 Coparator 인터페이스가 있다는 것을 알게되었다.</p>\n<h3>Comparable<T> 인터페이스</h3>\n<p>자바에서 Comparable 인터페이스는 객체를 정렬하는 데 사용되는 메소드인 comparaTo() 메소드를 정의하고 있습니다.\n자바에서 같은 타입의 인스턴스를 비교해야하는 클래스는 모두 Comparable 인터페이스를 사용하여 구현합니다.</p>\n<p>따라서 Boolean을 제외한 String int 같은 클래스의 인스턴스는 모두 정렬이 가능합니다.\n이때 기본정렬은 오름차순이고, 설정해서 내림차순으로 변경이 가능합니다.</p>\n<p>다음 예제는 인스턴스가 비교를 위해 사용자 정의 클래스인 Car클래스가 Comparable인터페이스를 구현하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">class Car implements Comparable&lt;Car&gt; {\n\n    private String modelName;\n\n    private int modelYear;\n\n    private String color;\n\n\n\n    Car(String mn, int my, String c) {\n\n        this.modelName = mn;\n\n        this.modelYear = my;\n\n        this.color = c;\n\n    }\n\n\n\n    public String getModel() {\n\n        return this.modelYear + &quot;식 &quot; + this.modelName + &quot; &quot; + this.color;\n\n    }\n\n\n\n    public int compareTo(Car obj) {\n\n        if (this.modelYear == obj.modelYear) {\n\n            return 0;\n\n        } else if(this.modelYear &lt; obj.modelYear) {\n\n            return -1;\n\n        } else {\n\n            return 1;\n\n        }\n\n    }\n\n}\n\n\n\npublic class Comparable01 {\n\n    public static void main(String[] args) {\n\n        Car car01 = new Car(&quot;아반떼&quot;, 2016, &quot;노란색&quot;);\n\n        Car car02 = new Car(&quot;소나타&quot;, 2010, &quot;흰색&quot;);\n\n\n\n        System.out.println(car01.compareTo(car02));\n\n    }\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Comparator<T> 인터페이스</h3>\n<p>Comparator 인터페이스는 Comparable 인터페이스와 같이 객체를 정렬하는데 사용되는 인터페이스입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">import java.util.*;\n\n\n\nclass DescendingOrder implements Comparator&lt;Integer&gt; {\n\n    public int compare(Integer o1, Integer o2) {\n\n        if(o1 instanceof Comparable &amp;&amp; o2 instanceof Comparable) {\n\n            Integer c1 = (Integer)o1;\n\n            Integer c2 = (Integer)o2;\n\n            return c2.compareTo(c1);\n\n        }\n\n        return -1;\n\n    }\n\n}\n\n\n\npublic class Comparable02 {\n\n    public static void main(String[] args) {\n\n        TreeSet&lt;Integer&gt; ts = new TreeSet&lt;Integer&gt;(new DescendingOrder());\n\n\n\n        ts.add(30);\n\n        ts.add(40);\n\n        ts.add(20);\n\n        ts.add(10);\n\n\n\n        Iterator&lt;Integer&gt; iter = ts.iterator();\n\n        while(iter.hasNext()) {\n\n            System.out.println(iter.next());\n\n        }\n\n    }\n\n}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[JAVA]Comparable과 Comparator","date":"June 10, 2020"},"id":"c136fb94-ace9-5493-af9c-c0bb853aaffc"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"disqus_93JVYbBpDP"}}}},"pageContext":{"slug":"/2020-06-10-javaCompare/","previous":{"fields":{"slug":"/2020-02-10-Complexity/"},"frontmatter":{"title":"시간 복잡도, 공간 복잡도, Big-O에 대해서 알아보자.","tag":["Posts"],"layout":null}},"next":{"fields":{"slug":"/2022-01-09-storage/"},"frontmatter":{"title":"[javaScript] 웹스토리지(localStorage, sessionStorage) 자세하게 정리.","tag":["Posts"],"layout":null}}}},"staticQueryHashes":["3668704128"]}