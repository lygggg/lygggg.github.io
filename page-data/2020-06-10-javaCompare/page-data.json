{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-06-10-javaCompare/","result":{"data":{"markdownRemark":{"html":"<h2>목적</h2>\n<p>얼마전 자바스크립트에서 사용하던 Compare 함수를 자바에서도 있나 찾아보던중 Comparable과 Coparator 인터페이스가 있다는 것을 알게되었다.</p>\n<h3>Comparable<T> 인터페이스</h3>\n<p>자바에서 Comparable 인터페이스는 객체를 정렬하는 데 사용되는 메소드인 comparaTo() 메소드를 정의하고 있습니다.\n자바에서 같은 타입의 인스턴스를 비교해야하는 클래스는 모두 Comparable 인터페이스를 사용하여 구현합니다.</p>\n<p>따라서 Boolean을 제외한 String int 같은 클래스의 인스턴스는 모두 정렬이 가능합니다.\n이때 기본정렬은 오름차순이고, 설정해서 내림차순으로 변경이 가능합니다.</p>\n<p>다음 예제는 인스턴스가 비교를 위해 사용자 정의 클래스인 Car클래스가 Comparable인터페이스를 구현하는 예제입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable<span class=\"token operator\">&lt;</span>Car<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> String modelName<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> int modelYear<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> String color<span class=\"token punctuation\">;</span>\n\n\n\n    <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String mn<span class=\"token punctuation\">,</span> int my<span class=\"token punctuation\">,</span> String c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelName <span class=\"token operator\">=</span> mn<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelYear <span class=\"token operator\">=</span> my<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelYear <span class=\"token operator\">+</span> <span class=\"token string\">\"식 \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n\n\n    <span class=\"token keyword\">public</span> int <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Car obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelYear <span class=\"token operator\">==</span> obj<span class=\"token punctuation\">.</span>modelYear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelYear <span class=\"token operator\">&lt;</span> obj<span class=\"token punctuation\">.</span>modelYear<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Comparable01</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        Car car01 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"아반떼\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2016</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"노란색\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Car car02 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"소나타\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2010</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"흰색\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>car01<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>car02<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Comparator<T> 인터페이스</h3>\n<p>Comparator 인터페이스는 Comparable 인터페이스와 같이 객체를 정렬하는데 사용되는 인터페이스입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DescendingOrder</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparator<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> int <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Integer o1<span class=\"token punctuation\">,</span> Integer o2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Comparable</span> <span class=\"token operator\">&amp;&amp;</span> o2 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Comparable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n            Integer c1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>o1<span class=\"token punctuation\">;</span>\n\n            Integer c2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Integer<span class=\"token punctuation\">)</span>o2<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> c2<span class=\"token punctuation\">.</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Comparable02</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        TreeSet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> ts = new TreeSet&lt;Integer>(new DescendingOrder());\n\n\n\n        ts.add(30);\n\n        ts.add(40);\n\n        ts.add(20);\n\n        ts.add(10);\n\n\n\n        Iterator</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"> iter = ts.iterator();\n\n        while(iter.hasNext()) </span><span class=\"token punctuation\">{</span>\n\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\n    }\n\n}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[JAVA]Comparable과 Comparator","date":"June 10, 2020"},"id":"c136fb94-ace9-5493-af9c-c0bb853aaffc"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2020-06-10-javaCompare/","previous":{"fields":{"slug":"/2020-02-10-Complexity/"},"frontmatter":{"title":"시간 복잡도, 공간 복잡도, Big-O에 대해서 알아보자.","tag":["Posts"],"layout":null}},"next":{"fields":{"slug":"/2022-01-09-storage/"},"frontmatter":{"title":"[javaScript] 웹스토리지(localStorage, sessionStorage) 정리.","tag":["Posts"],"layout":null}}}},"staticQueryHashes":["3668704128"]}