{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019-11-26-TIL6/","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"https://velog.io/@velopert/react-hooks\">React Hooks 사용하기</a></li>\n<li><a href=\"https://reactjs-kr.firebaseapp.com/docs/handling-events.html\">React 이벤트 제어</a></li>\n<li><a href=\"https://velog.io/@velopert/react-hooks\">Hooks완정정복</a></li>\n<li>[useEffect]함수형 컴포넌트에서도 가변적인 상태를 지닐수있게해줌</li>\n<li>[useState] 리액트 컴포넌트가 렌더링 될 때마다 특정 작업을 수행할수있도록 설정 할 수있는 HOOK이다.\n클래스형 컴포넌트의 componentDidMount 와 componentDidUpdate 를 합친 형태로 봐도 무방하다.</li>\n</ul>\n<p>Facts: 오늘은 useState와 useEffect를 사용해서 검색시스템을 만들어 보았다. 처음에는 useEffect를 직접 써보지 않아서 막상 쓰려고 하기엔 어려운 부분이 있었다. 그래서 나는 직접 간단한 다른 예제를 통해서 useEffect가 대충 어떤식으로 쓰이는지와 왜 쓰는지를 공부하였고 내가 구현하는곳에 적용시켰다. 또, 장바구니 기능을 구현했는데 이번에는 내가 생각하는대로 구성을 하고 어떤식으로 데이터를 저장하고 보여줄지 결정한후 내가 장바구니에 넣은 아이템들이 리스트에 쌓여서 장바구니 화면에 출력할수있도록 구현하였다.</p>\n<p>Feelings: 나는 기능을 구현할때에 생각해보지도 않고 예제에 의존하는 경향이 있다. 확실하게 고쳐야한다.</p>\n<p>Findings: 무조건 예제의 의존하지않고 내가 구성한대로 실행하면 문제를 해결 할 수 있다는것을 알았다. 나는 항상 무엇을 하기전에부터 겁을 먹는다, 그리고 무조건 예제를 찾아본다. 오늘 그래서 나는 장바구니 기능을 만들때처럼 내가 생각하고 구성해서 기능을 완성 할 수 있다는것을 알았다.</p>\n<p>Future Action Plan: 항상 오류는 내 잘못이기 마련이다. 내가 실수하지않으면 오류는 생기지않는다. 어떤 것이든 대충 넘어가지않고 확실히 꼼꼼하게 읽는 능력을 길러야겠다.</p>\n<p>Feedback: 나는 아직도 실수라는 오류를 범한다. 사람은 망각의동물.. 하지만 꾸준히 보는것은 잊어버리지않는다.</p>","frontmatter":{"title":"2019-11-26 TIL","date":"November 26, 2019"},"id":"bd0a81fd-c9c8-585c-b9a1-d054692deb83"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"Your Disqus-short-name here"}}}},"pageContext":{"slug":"/2019-11-26-TIL6/","previous":{"fields":{"slug":"/2019-11-25-TIL5/"},"frontmatter":{"title":"2019-11-25 TIL","tag":["TIL"],"layout":null}},"next":{"fields":{"slug":"/2019-11-27-TIL7/"},"frontmatter":{"title":"2019-11-27 TIL","tag":["TIL"],"layout":null}}}},"staticQueryHashes":["3668704128"]}