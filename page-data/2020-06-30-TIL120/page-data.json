{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-06-30-TIL120/","result":{"data":{"markdownRemark":{"html":"<h2>Fact</h2>\n<ul>\n<li>프로그래머스 레벨2 폰켓몬 문제를 풀었다. 레벨 2지만 쉽게 이해만 한다면 정말 쉽게 풀수있는 문제였다.</li>\n<li>자바 인터페이스에 대해서 복습하고 직접 사용해보았다.</li>\n</ul>\n<h2>Feelings</h2>\n<ul>\n<li>알고리즘 문제를 보면 막상 문제를 이해하는 것은 어려운데 알고리즘을 짜는 것은 쉬운 문제들이 있다.</li>\n<li>역시 다양한 풀이 방법을 외우는 것이 정말 중요하고 느꼈다.</li>\n</ul>\n<h2>Findings</h2>\n<ul>\n<li>인터페이스는 서비스 공급자와 자신의 객체를 이 서비스에 사용하고 싶은 클래스 간의 계약을 기술하는 메커니즘이다.</li>\n<li>기본 구현을 작성하지 않고 선언만 한 메서드를 추상 메서드라고 한다.</li>\n<li>인터페이스의 모든 메소드는 자동으로 public이 된다. 그러므로 일일이 선언해 줄 필요가 없다. 하지만 일부 프로그래머들은 의도를 더 명확하게 드러내기 위해 public으로 선언하기도 한다.</li>\n<li>인터페이스를 구현하는 클래스는 인터페이스 메서드를 반드시 public으로 선언해야 한다. 그렇지 않으면 클래스의 메서드는 기본적으로 패키지 접근이 된다.</li>\n<li>인터페이스를 따르는 클래스는 그 해당 인터페이스의 모든 메서드를 구현한다. 만약 일부만 구현한다면, 해당 클래스는 반드시 abstract 제어자로 선언해야 한다.</li>\n</ul>\n<h2>Future Action</h2>\n<ul>\n<li>책을 여러 개를 보기보다는 한 책을 꾸준히 읽어서 마스터한다는 마인드로 책을 읽어야겠다.</li>\n</ul>","frontmatter":{"title":"2021-06-30 TIL","date":"June 30, 2021"},"id":"9ec12f78-e835-52ec-8153-4d3a97fd6983"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"Your Disqus-short-name here"}}}},"pageContext":{"slug":"/2020-06-30-TIL120/","previous":{"fields":{"slug":"/2020-06-25-TIL118/"},"frontmatter":{"title":"2021-06-25 TIL","tag":["TIL"],"layout":null}},"next":{"fields":{"slug":"/2020-07-01-TIL121/"},"frontmatter":{"title":"2021-07-01 TIL","tag":["TIL"],"layout":null}}}},"staticQueryHashes":["3668704128"]}