{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-03-16-TIL185/","result":{"data":{"markdownRemark":{"html":"<h2>Fact</h2>\n<ul>\n<li>REST API, REST ful에 대해서 공부하고 내 프로젝트에 적용하고있다.</li>\n<li>프론트엔드 인터뷰 스터디를 참여했다. 오늘도 모두가 발표준비를 잘해와서 너무 좋았다.</li>\n<li>프로그래머스 레벨3 디스크 컨트롤러 문제를 못풀었다. 엣지케이스가 많은 문제이기도 하고, 문제에서 제대로된 설명이 안나와있는 것들도 고려해야하는 문제였다.</li>\n</ul>\n<h2>Feelings</h2>\n<ul>\n<li>알고리즘 문제 하나를 푸는데 시간을 너무 소비했다.. ㅠㅠ</li>\n</ul>\n<h2>Findings</h2>\n<h2>REST API의 탄생</h2>\n<p>REST는 Representational State Transfer라는 용어의 약자로서 2000년도에 로이 필딩 (Roy Fielding)의 박사학위 논문에서 최초로 소개되었습니다. 로이 필딩은 HTTP의 주요 저자 중 한 사람으로 그 당시 웹(HTTP) 설계의 우수성에 비해 제대로 사용되어지지 못하는 모습에 안타까워하며 웹을 장점을 최대한 활용할 수 있는 아키텍처로써 REST를 발표했다고 합니다.</p>\n</br>\n</br>\n<h2>REST 구성</h2>\n<p>쉽게 말해 REST API는 다음의 구성으로 이루어져있습니다. 자세한 내용은 밑에서 설명하도록 하겠습니다.</p>\n<ul>\n<li>자원(RESOURCE) - URI</li>\n<li>행위(Verb) - HTTP METHOD</li>\n<li>표현(Representations)</li>\n</ul>\n</br>\n</br>\n<h2>REST의 특징</h2>\n<ol>\n<li>Uniform (유니폼 인터페이스)\nUniform interface는 URI로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행하는 아키텍처 스타일을 말합니다.</li>\n<li>Stateless (무상태성)\nREST는 무상태성 성격을 갖습니다. 다시 말해 작업을 위한 상태정보를 따로 저장하고 관리하지 않습니다. 세션 정보나 쿠키정보를 별도로 저장하고 관리하지 않기 때문에 API 서버는 들어오는 요청만을 단순히 처리하면 됩니다.</li>\n<li>Cacheable (캐시 가능)\nREST의 가장 큰 특징 중 하나는 HTTP라는 기존 웹표준을 그대로 사용하기 때문에, 웹에서 사용하는 기존 인프라를 그대로 활용이 가능합니다. 따라서 HTTP가 가진 캐싱 기능이 적용 가능합니다. HTTP 프로토콜 표준에서 사용하는 Last-Modified태그나 E-Tag를 이용하면 캐싱 구현이 가능합니다.</li>\n<li>Self-descriptiveness (자체 표현 구조)\nREST의 또 다른 큰 특징 중 하나는 REST API메세지만 보고도 이를 쉽게 이해할 수 있는 자체 표현 구조로 되어있다는 것입니다.</li>\n<li>Client - Server 구조\nREST 서버는 API제공, 클라이언트는 사용자 인증이나 컨텍스트(세션, 로그인 정보)등을 직접 관리하는 구조로 각각의 역할이 확실히 구분되기 떄문에 클라이언트와 서버에서 개발해야 할 내용이 명확해지고 서로간의 의존성이 줄어들게됩니다.</li>\n<li>계층형구조\nREST 서버는 다중 계층으로 구성될 수 있으며 보안, 로드 밸런싱, 암호화 계층을 추가해 구조상의 유연성을 둘 수 있고 PROXY, 게이트웨이 같은 네트워크 기반의 중간매체를 사용할 수 있게 합니다.</li>\n</ol>\n</br>\n</br>\n<h2>REST API 디자인 가이드</h2>\n<p>REST API 설게시 가장 중요한 항목은 다음의 2가지로 요약할 수 있습니다.</p>\n<p><code class=\"language-text\">첫 번째,</code> URL는 정보의 자원을 표현해야 합니다.\n<code class=\"language-text\">두 번째,</code> 자원에 대한 행위는 HTTP Method(GET,POST,PUT,DELETE)로 표현한다.</p>\n<h3>REST API 중심 규칙</h3>\n<ol>\n<li>URI는 정보의 자원을 표현해야 한다.(리소스명은 동사보다는 명사를 사용)</li>\n</ol>\n</br>\n<blockquote>\nGET /members/delete/1\n</blockquote>\n</br>\n<p>위와 같은 방식은 REST를 제대로 적용하지 않은 URI입니다. URI는 자원을 표현하는데 중점을 두어야 합니다. delete와 같은 행위에 대한 표현이 들어가서는 안됩니다.</p>\n<ol start=\"2\">\n<li>자원에 대한 행위는 HTTP Method(GET, POST, PUT, DELETE등)으로 표현합니다.</li>\n</ol>\n</br>\n<blockquote>\nDELETE /member/1\n</blockquote>\n</br>\n<p>으로 수정해야합니다.\n회원정보를 가져올 떄는 GET, 회원 추가 시의 행위를 표현하고자 할 때는 POST METHOD를 사용하여 표현합니다.</p>\n<p>회원 정보를 가져오는 URI</p>\n</br>\n<blockquote>\nGET /members/show/1 (x)\nGET /members/1      (o)\n</blockquote>\n</br>\n<p>회원을 추가할 때</p>\n</br>\n<blockquote>\nGET /members/insert/2 (x)\nPOST /members/2       (o)\n</blockquote>\n</br>\n<h3>URI 설계시 주의할 점</h3>\n<ol>\n<li>슬래시 구분자(/)는 계층 관게를 나타내는 데 사용</li>\n</ol>\n</br>\n   <blockquote>\n   http://restapi.example.com/houses/apartments\n   http://restapi.example.com/animals/mammals/whales\n   </blockquote>\n</br>\n<ol start=\"2\">\n<li>URI 마지막 문자로 슬래시(/)를 포함하지 않는다.\nURI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 합니다. REST API는 분명한 URI를 만들어 통신해야 하기때문에 혼동을 주지 않도록 URI 경로의 마지막에는 슬래시(/)를 사용하지 않습니다.</li>\n</ol>\n</br>\n<blockquote>\nhttp://restapi.example.com/houses/apartments/ (x)\nhttp://restapi.example.com/houses/apartments/ (o)\n</blockquote>\n</br>\n<ol start=\"3\">\n<li>하이픈(-)은 가독성을 높이는데 사용합니다.\nURI를 쉽게 읽고 해석하기 위해, 불가피하게 긴 URI경로를 사용하게 된다면 하이픈을 사용해 가독성을 높일 수 있습니다.</li>\n<li>밑줄(_)은 URI에 사용하지 않는다.\n밑줄은 가려질 가능성이 있기때문에 사용하지 않는 것이 좋습니다.</li>\n<li>URI경로는 소문자가 적합하다.\nURI 경로에 대문자 사용은 피하도록 해야합니다. 대소문자에 따라 다른 리소스로 인식하게 되기 때문입니다.</li>\n<li>파일 확장자는 URI에 포함시키지 않는다.</li>\n</ol>\n</br>\n<blockquote>\nhttp://restapi.example.com/members/soccer/345/photo.jpg (X)\n</blockquote>\n</br>\n<p>REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI안에 포함시키지 않습니다. Accept header를 사용하도록 합시다.</p>\n</br>\n<blockquote>\nGET / members/soccers/345/photo HTTP/1.1 Host: restapi.example.com Accept: image/jpg\n</blockquote>\n</br>\n<h3>4-3. 리소스 간의 관계를 표현하는 방법</h3>\n<p>REST 리소스간의 연관 관계가 있을 수 있습니다</p>\n</br>\n<blockquote>\n/리소스명/리소스 ID/관계가 있는 다른 리소스명\nex) GET : /users/{userid}/devices\n</blockquote>\n</br>\n<h3>4-4. 자원을 표현하는 Collection과 Document</h3>\n<p>Collection과 Document에 대해 알면 URI 설계가 한 층 더 쉬워집니다. DOCUMENT는 단순히 문서로 이해해도 되고, 한 객체라고 이해하셔도 될 것 같습니다. 컬렉션은 문서들의 집합, 객체들의 집합이라고 생각하시면 이해하시는데 좀 더 편하실 것 같습니다. 컬렉션과 도큐먼드는 모두 리소스라고 표현할 수 있으며 URI에 표현됩니다.</p>\n</br>\n<blockquote>\nhttp:// restapi.example.com/sports/soccer\n</blockquote>\n</br>\n<p>위 URI는 sports라는 컬렉션과 soccer라는 도큐먼드로 표현되고 있다고 생각하면됩니다. 좀 더 예를 들어보자면</p>\n</br>\n<blockquote>\nhttp:// restapi.example.com/sports/soccer/players/13\n</blockquote>\n</br>\n<p>sports, players 컬렉션과 soccer, 13(13번인 선수)를 의미하는 도큐먼트로 URI가 이루어지게 됩니다. 여기서 중요한 점은 컬렉션은 복수로 사용되고 있다는 점입니다. 좀 더 직관적인 REST API를 위해서는 컬렉션과 도큐먼트를 사용할 때 단수복수도 지켜준다면 좀 더 이해하기 쉬운 URI를 설계할 수 있습니다.</p>\n<p></br></br></p>\n<h2>HTTP 응답 상태 코드</h2>\n<p>마지막으로 응답 상태코드를 간단히 살펴보겠습니다. 잘 설계뙨 REST API는 URI만 잘 설계된 것이 아닌 그 리소스에 대한 응답을 잘 내어주는 것까지 포함되어야 합니다. 정확한 응답의 상태코드만으로도 많은 정보를 전달할 수가 있기 떄문에 응답의 상태코드 값을 명확히 돌려주는 것은 생각보다 중요한 일이 될수도 있습니다. 혹시 200이나 4xx관련 특정 코드 정도만 사용하고 있다면 처리 상태에 대한 좀 더 명확한 상태코들 값을 사용할 수 있기를 권장하는 바입니다.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>200</td>\n<td>클라이언트의 요청을 정상적으로 수행</td>\n</tr>\n<tr>\n<td>201</td>\n<td>클라이언트가 어떠한 리소스 생성을 요청, 해당 리소스가 성공적으로 생성됨</td>\n</tr>\n<tr>\n<td>400</td>\n<td>클라이언트의 요청이 부적절할 경우 사용하는 응답 코드</td>\n</tr>\n<tr>\n<td>401</td>\n<td>클라이언트가 인증되지 않은 상태에서 보호된 리소스를 요청 했을 때 사용하는 응답 코드(로그인 하지 않은 유저가 로그인 했을 때 요청 가능한 리소스를 요청했을 때)</td>\n</tr>\n<tr>\n<td>403</td>\n<td>유저 상태와 관계 없이 응답하고 싶지 않은 리소스를 클라이언트가 요청했을 때 사용하는 응답 코드(403 보다는 400이나 404를 사용할 것을 권고. 403 자체가 리소스가 존재한다는 뜻이기 때문에)</td>\n</tr>\n<tr>\n<td>405</td>\n<td>클라이언트가 요청한 리소스에서는 사용 불가능한 Method를 이용했을 경우 사용하는 응답 코드</td>\n</tr>\n<tr>\n<td>301</td>\n<td>클라이언트가 요청한 리소스에 대한 URI가 변경 되었을 때 사용하는 응답 코드(응답시 Location header에 변경된 URIㄹ르 적어주어야 합니다.)</td>\n</tr>\n<tr>\n<td>500</td>\n<td>서버에 문제가 있을 경우 사용하는 응답 코드</td>\n</tr>\n</tbody>\n</table>\n<h2>Future Action</h2>\n<ul>\n<li>프로젝트 URI를 REST ful 하게 해보기 설계해보기.</li>\n<li>-</li>\n</ul>","frontmatter":{"title":"2022-03-16 TIL","date":"March 16, 2022"},"id":"05612a71-d879-5ca2-a8e2-b05a2295d818"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2022-03-16-TIL185/","previous":{"fields":{"slug":"/2022-03-15-TIL183/"},"frontmatter":{"title":"2022-03-15 TIL","tag":["TIL"],"layout":null}},"next":{"fields":{"slug":"/2019-11-18-TIL1/"},"frontmatter":{"title":"2019-11-18 TIL","tag":["TIL"],"layout":null}}}},"staticQueryHashes":["3668704128"]}