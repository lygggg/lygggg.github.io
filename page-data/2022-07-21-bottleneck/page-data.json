{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-07-21-bottleneck/","result":{"data":{"markdownRemark":{"html":"<h2>병목현상?</h2>\n<br/>\n<p>비동기 처리를 겪으면 필수로 겪는 문제인 병목현상에 대해서 알아보려고 합니다. 나무위키에서는 병목현상에 대해서 아래와 같이 설명하고 있습니다.</p>\n<br/>\n<Blockquote>\n현실에서는 차로에 출구가 대폭 줄어들어 교통 체증이 생기는 현상을 병목현상이라고 표현합니다. \n </Blockquote>\n <br/>\n<p>필자도 제대로 공부를 하기 전에는 비동기 코드를 작성하면서 아무런 문제가 없다고 생각했습니다. 이번 기회에 과거를 반성하며 글로 정리해 보려고 합니다.</p>\n<br/>\n<h2>비동기 처리</h2>\n<br/>\n<p>자바스크립트에서는 ES6 이전에 Promise가 존재하지 않을 때 비동기 함수의 콜백 내부에서 다음 비동기 함수를 호출하는 방법으로 비동기 처리가 필요한 부분들을 해결했습니다. 하지만 이런 방법은 가독성도 떨어지고 개발자를 괴롭게 만드는 요소 중 하나였습니다.</p>\n<p>추후에 이런 문제를 해결하기 위해 Promise, async await가 나왔고, 많은 사람들이 비동기 처리를 위해서 async await를 주로 사용하고 있습니다. 그럼 아래에서 설명하겠습니다.</p>\n<br/>\n<h2>무분별한 Async Await로 인한 문제점</h2>\n<br/>\n<h3>Promise 함수 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promise1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promise2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promise3</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>시간을 측정하기 위해 1000, 2000, 3000씩 딜레이를 넣은 Promise 함수를 3개 함수를 선언했습니다.</p>\n<br/>\n<h3>시간 측정</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function promise1'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function promise2'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function promise3'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">promise1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function promise1'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">promise2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function promise2'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">promise3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function promise3'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>각각의 함수를 <code class=\"language-text\">console.time</code> 을 사용해서 종료되는 시간을 측정했습니다.\n해당 메서드가 궁금하시면 아래를 참고하면 될 것 같습니다.</p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/console/time\">console.time()</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/console/timeEnd\">console.tumeEnd()</a></p>\n<br/>\n<h3>결과</h3>\n<p><img src=\"https://user-images.githubusercontent.com/52567149/180214886-aca9a382-d783-4a86-a0ad-c7c106fcd3b8.png\" alt=\"image\"></p>\n<br/>\n<p>함수가 종료되는 시간이 증가해서 모든 마지막 함수가 종료되기까지 걸리는 시간이 6초인 것을 확인할 수 있습니다. asnyc await는 비동기 처리를 하기 위한 문법으로 순차적으로 결과가 출력된 후에 아래 코드를 실행합니다. 즉 동시에 실행해도 무방한 작업들을 순차적으로 실행하면서 불필요한 대기시간이 발생하게 됩니다.</p>\n<br/>\n<p><img src=\"https://user-images.githubusercontent.com/52567149/180200131-7c80419e-3c2c-40fd-8435-3f3cf524836e.png\" alt=\"image\"></p>\n<h2>Promise.all</h2>\n<p>함수가 아무런 연관성이 없을 때는 Promise.all을 사용함으로써 위와 같은 문제를 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promiseAll'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">promise1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">promise2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">promise3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promiseAll'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<h3>결과</h3>\n<p><img src=\"https://user-images.githubusercontent.com/52567149/180216695-e79f40b4-caf8-48bb-aeb8-91e2bb339fc4.png\" alt=\"image\"></p>\n<br/>\n<p><code class=\"language-text\">promise.all</code>을 사용하면 함수의 종료시간이 줄어든 것을 확인할 수 있습니다. 해당 메서드의 비동기 통신은 병렬로 작동합니다. 이러한 이유 때문에 가장 시간이 오래 걸리는 것을 기준으로 모든 응답이 처리됩니다. 이런 상황일 때 해당 메서드의 사용을 고려해 볼 수 있습니다.\n하지만 promise.all은 한 가지 문제점이 존재합니다.</p>\n<br/>\n<h3>주의할 점</h3>\n<p>응답 처리 중에 문제가 생겨서 Promise 객체 중 하나라도 reject가 발생하면 응답 데이터 전체를 받아올 수 없습니다. 그렇기 때문에 아무런 결과를 받아오지 못하면 어느 응답이 잘못된 건지 알 수가 없습니다.</p>\n<p>결국 상황에 맞게 사용하는 것이 중요한 것 같습니다. 예를 들면 안전성이 높은 요청이거나, 의존성이 없는 요청에 사용하는 것이 맞다고 생각합니다.</p>\n<br/>\n<h2>Promise.allSettled</h2>\n<p>Promise.allSettled의 사용 방법과 병렬로 비동기 처리를 하는 부분은 Promise.all과 동일합니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promiseAll'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">promise1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">promise2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">promise3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promiseAll'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>하지만 결과는 다릅니다. Promise.all 같은 경우는 하나라도 reject가 있다면 전부 reject를 반환하지만 Promise.allSettled는 fulfiled 상태라면 value를 rejected 상태라면 reason 속성을 가진 객체를 반환합니다.</p>\n<br/>\n<h3>결과 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"> <span class=\"token punctuation\">[</span>\n   <span class=\"token punctuation\">{</span>status<span class=\"token operator\">:</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">33</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">{</span>status<span class=\"token operator\">:</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">66</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">{</span>status<span class=\"token operator\">:</span> <span class=\"token string\">\"fulfilled\"</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> <span class=\"token number\">99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">{</span>status<span class=\"token operator\">:</span> <span class=\"token string\">\"rejected\"</span><span class=\"token punctuation\">,</span>  reason<span class=\"token operator\">:</span> Error<span class=\"token operator\">:</span> an error<span class=\"token punctuation\">}</span>\n <span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>또한 Promise.all 같은 경우 특정 브라우저(IE)에서는 지원하지 않으므로 때문에 상황에 맞게 사용해야 합니다.</p>\n<br/>\n<h2>함수끼리 의존성이 있는 경우</h2>\n<br/>\n<p>위에서 선언했던 함수를 수정하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promise1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promise2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">promise3</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">n</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>이번에는 setTimeout 시간, param 만큼 딜레이 되는 promise3 함수를 추가하고 promise2 함수는 1500을 리턴하도록 수정했습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function main'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> runA <span class=\"token operator\">=</span> <span class=\"token function\">promise1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> runB <span class=\"token operator\">=</span> <span class=\"token function\">promise2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">await</span> runA\n<span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> runB\n\n<span class=\"token keyword\">await</span> <span class=\"token function\">promise3</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function main'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>runA와 runB는 동시에 실행되고, runB의 결과를 받아서 promise3 함수의 인자로 넣은 후 실행합니다. 결과를 확인해 보겠습니다.</p>\n<br/>\n<p><img src=\"https://user-images.githubusercontent.com/52567149/180603386-4e51d640-0bf2-4135-bf2e-1239ec4bc127.png\" alt=\"image\"></p>\n<br/>\n<p>runA와 runB가 동시에 실행되지만 await runA가 종료되는 시간 2초를 기다렸다가 promise3를 실행하기 때문에 3초가 걸리는 것을 볼 수 있습니다.</p>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function main'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> runA <span class=\"token operator\">=</span> <span class=\"token function\">promise1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> runB <span class=\"token operator\">=</span> <span class=\"token function\">promise2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> time <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> runB\n<span class=\"token keyword\">const</span> runC <span class=\"token operator\">=</span> <span class=\"token function\">promise3</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">await</span> runC\n<span class=\"token keyword\">await</span> runA\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'function main'</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<br/>\n<p>위에 수정된 코드처럼 runB, promise3 함수를 먼저 처리하고, runA를 호출하면 시간을 단축시킬 수 있습니다.</p>\n<br/>\n<p><img src=\"https://user-images.githubusercontent.com/52567149/180605272-58b7acad-b131-43f7-9192-54672093b2a6.png\" alt=\"image\"></p>\n<br/>\n<h2>결론</h2>\n<br/>\n<p>async await를 사용함으로써 가져오는 코드의 가독성, 편리함에 눈이 멀어 정작 중요한 문제점에 대해서는 생각해 보지 못했다.</p>\n<p>async await는 코드를 순차적으로 실행하기 때문에 동시에 실행해도 무방한 작업들이 불필요한 대기시간이 발생하게 된다. 이것을 병목현상이라고 한다. 이 문제를 해결하기 위해서는 Promise.all, Promise.allSettled 같은 방법과 코드의 위치를 변경하는 것만으로도 실행 시간을 줄일 수 있다.</p>\n<p>프로그램의 성능에 대해서 계속해서 고민해야 한다고 생각한다. 어찌 보면 1초라는 게 적은 시간처럼 보일 수는 있지만 하나하나씩 모이다 보면 결국 큰 차이로 변하기 때문이다.</p>\n<h3>참고</h3>\n<p><a href=\"https://medium.com/@HoseungJang/javascript%EC%97%90%EC%84%9C-async-await%EC%9D%98-%EB%B3%91%EB%AA%A9-%EB%AC%B8%EC%A0%9C-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-60d54795c4fa\">https://medium.com/@HoseungJang/javascript%EC%97%90%EC%84%9C-async-await%EC%9D%98-%EB%B3%91%EB%AA%A9-%EB%AC%B8%EC%A0%9C-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-60d54795c4fa</a></p>\n<p>기초부터 완성까지 프런트엔드</p>","frontmatter":{"title":"async await를 남발하면 생기는 병목현상","date":"July 06, 2022"},"id":"4164c1b8-c6f8-56ad-9a6c-d9bd45097df5"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2022-07-21-bottleneck/","previous":{"fields":{"slug":"/2022-07-06-deepCopy/"},"frontmatter":{"title":"깊은 복사에 대해 얼마나 자세히 알고 있을까?","tag":["JavaScript"],"layout":null}},"next":{"fields":{"slug":"/2022-07-06-deepCopy/"},"frontmatter":{"title":"깊은 복사에 대해 얼마나 자세히 알고 있을까?","tag":["JavaScript"],"layout":null}}}},"staticQueryHashes":["3668704128"]}