{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-02-16-TIL166/","result":{"data":{"markdownRemark":{"html":"<h2>Fact</h2>\n<ul>\n<li>알고리즘 DFS를 복습할 겸 재귀 함수 문제, 이진트리 문제, 부분집합 문제, 중복순열 문제를 풀었다.</li>\n<li>퀴즈 데이터를 받아오지 못할 시 에러 컴포넌트를 만들고 해당 컴포넌트를 출력하도록 구현했다.</li>\n<li>로그인, 회원가입 실패 시 에러 메시지 컴포넌트를 출력하도록 구현했다.</li>\n<li>로그인을 안 하고 퀴즈를 클릭할 경우 login 페이지로 넘어가도록 구현했다.</li>\n<li>로그인 페이지에서 새로고침을 누를 경우 자동완성 상태에서 로그인 버튼을 누르면 ”이메일을 입력하세요” 유효성 검사 메시지가 나온다. 새로고침하면 useform에 register에 상태가 날아가서 그런 것 같은데 방법을 찾아봐야겠다.</li>\n<li>react-spinners를 사용해서 로그인 버튼을 누를 경우 완료가 될 때까지 로딩 상태를 구현했다.</li>\n</ul>\n<h2>Feelings</h2>\n<ul>\n<li>알고리즘 풀 때 fill을 항상 조심하자.</li>\n</ul>\n<p>아래와 같이 배열을 복사하면 얇은 복사가 된다. 얇은 복사를 하면 새로운 메모리에 할당되는 게 아니라 기존에 있던 메모리에서 값만 바뀐다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token constant\">M</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>다시 스프래드 연산자로 깊은복사를 해주는게 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> check <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>Findings</h2>\n<p>문자열은 원시타입인데 어떻게 length 프로퍼티를 가질수있을까? 자바스크립트는 문자열의 프로퍼티에 접근할 때 내부적으로 문자열 값을 가지고 임시 객체로 변환합니다. 그리고 프로퍼티 접근이 종료되면 생성된 객체는 제거됩니다. 이런 과정을 박싱(Boxing)이라고 부릅니다. 숫자와 불리언타입 다 동일합니다. 박싱 과정에서 생성되는 임시 객체를 랩퍼 객체라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'javascript'</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>아래처럼도 사용할수있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'javascript'</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ['j', 'a', 'v', 'a', 's', 'c', 'r', 'i', 'p', 't']</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<br/>\n<ul>\n<li>URI(Uniform resource ldentifier)는 네트워크 상에 자원 위치를 알려주기 위한 규약이다. URI(Uniform resource Locator)의 존재는 인터넷에서 요구되는 기본 조건으로서 인터넷 프로토콜에 항상 붙어다닙니다.</li>\n<li>URI가 URL의 상위개념이다. 예를들어 <a href=\"https://lyggg.com\">https://lyggg.com</a> 은 URI이면서 URL이다. <a href=\"https://lyggg.com/blog\">https://lyggg.com/blog</a> 또한 URI이면서 URL이다. 하지만 <a href=\"https://lyggg.com/blog/search?query=%EA%B3%A0%EC%96%91%EC%9D%B4\">https://lyggg.com/blog/search?query=고양이</a>\n여기서 <a href=\"https://lyggg.com/blog/search%EA%B9%8C%EC%A7%80%EB%A7%8C\">https://lyggg.com/blog/search까지만</a> URL이고 “query=고양이”는 원하는 정보에 도달하기 위한 식별자다.</li>\n</ul>\n<br/>\n<p>아래처럼 Spinner컴포넌트를 따로 만들고.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> ClipLoader <span class=\"token keyword\">from</span> <span class=\"token string\">'react-spinners/ClipLoader'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Spinner</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ClipLoader</span></span> <span class=\"token attr-name\">size</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">100</span><span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#CC3D3D<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Container</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>아래처럼 컴포넌트로 가져와서 사용할수있다. 로그인이 끝나면 loding 상태를 변경해주도록하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> Spinner <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/modals/Spinner'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>loding<span class=\"token punctuation\">,</span> setLoding<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setLoding</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">버튼</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>loding <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Spinner</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Future Action</h2>\n<ul>\n<li>달리자.</li>\n</ul>","frontmatter":{"title":"2022-02-16 TIL","date":"February 16, 2022"},"id":"7b034f71-38c3-542f-9bf8-040b91c6e439"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2022-02-16-TIL166/","previous":{"fields":{"slug":"/2022-02-14-TIL165/"},"frontmatter":{"title":"2022-02-14 TIL","tag":["TIL"],"layout":null}},"next":{"fields":{"slug":"/2019-11-18-TIL1/"},"frontmatter":{"title":"2019-11-18 TIL","tag":["TIL"],"layout":null}}}},"staticQueryHashes":["3668704128"]}