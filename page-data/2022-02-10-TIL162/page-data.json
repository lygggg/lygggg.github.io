{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-02-10-TIL162/","result":{"data":{"markdownRemark":{"html":"<h2>Fact</h2>\n<ul>\n<li>algolia의 quiz index에 퀴즈가 추가되면 해당 퀴즈 데이터를 저장하도록 구현했다.</li>\n<li>검색어를 입력하면 검색어에 맞는 데이터를 가져오도록 구현했다.</li>\n</ul>\n<h2>Feelings</h2>\n<ul>\n<li>algolia를 사용한 이유는 원래 Query String를 사용해서 문자열을 가져와서 데이터베이스 연산으로 검색 기능을 구현하려고 했으나, 적은 양의 데이터 라고 한다면 상관이 없겠지만 데이터가 많아질수록 데이터베이스 자체 연산으로 데이터를 가져오기엔 한계를 느낄 것으로 예상하여 도입했다 자세한 내용은 <a href=\"https://www.algolia.com/doc/guides/getting-started/what-is-algolia/\">https://www.algolia.com/doc/guides/getting-started/what-is-algolia/</a></li>\n</ul>\n<h2>Findings</h2>\n<ul>\n<li>algolia는 웹 검색을 제공하는 SaaS 서비스 제품입니다.</li>\n</ul>\n<p>algolia index에 json 데이터를 저장하는 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> algoliasearch <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'algoliasearch'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ALGOLIA_APP_ID</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">ALGOLIA_APP_ID</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ALGOLIA_API_KEY</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">ALGOLIA_API_KEY</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ALGOLIA_INDEX_NAME</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">ALGOLIA_INDEX_NAME</span>\n\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token function\">algoliasearch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALGOLIA_APP_ID</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ALGOLIA_API_KEY</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">initIndex</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALGOLIA_INDEX_NAME</span><span class=\"token punctuation\">)</span>\n\nindex<span class=\"token punctuation\">.</span><span class=\"token function\">saveObjects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> autoGenerateObjectIDIfNotExist<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>autoGenerateObjectIDIfNotExist: true를 설정 안 해줘서 살짝 삽질했다..</p>\n<p>공식 문서에 나와있는 글을 보면 false일 경우 objectID를 포함하지 않는 객체를 저장할 경우 에러가 발생한다고 했는데, 아무런 에러가 발생하지 않는다.. 단지 저장이 안 된다</p>\n<p>그렇다 index에 데이터를 저장하기 위해선 objectID를 넣어주어야 한다. 아니면 autoGenerateObjectIDIfNotExist를 true로 설정해 주고 몽고디비 ObjectId처럼 엔진이 자동으로 지정해 주도록 해야 한다. Java, JavaScript, PHP and .NET는 기본값이 false라고 한다.</p>\n<Blockquote>\nWhen false, if any of the objects doesn’t contain an objectID, the method throws an error. When true, if any of the objects doesn’t contain an objectID, the engine automatically assigns one. Note: Java, JavaScript, PHP and .NET default to false.\n</Blockquote>\n<br/>\n<br/>\n<ul>\n<li>algolia index 검색도 똑같이 하면 된다. 입력값은 무조건 query string만 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\">index<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'query string'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//무조건 쿼리스트링만 가능하다.</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<ul>\n<li>굳이 직접 검색 api를 만들어서 직접 호출할 필요가 없다. algolia에서 React InstantSearch라는 틀을 제공해 준다. 그냥 편하게 검색창에 텍스트만 넣으면 알아서 페이지 네이션까지 다 해준다. <a href=\"https://www.algolia.com/doc/guides/building-search-ui/getting-started/react/#build-a-user-interface\">https://www.algolia.com/doc/guides/building-search-ui/getting-started/react/#build-a-user-interface</a> 하지만 공부하는 입장이니 직접 api까지 만들어서 form으로 구현해보려고 한다.</li>\n</ul>\n<h2>Future Action</h2>\n<ul>\n<li>퀴즈리스트 컴포넌트를 재사용할 방법을찾아봐야겠다.</li>\n</ul>","frontmatter":{"title":"2022-02-10 TIL","date":"February 10, 2022"},"id":"8e51be64-139b-58cf-8007-857b5c838402"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2022-02-10-TIL162/","previous":{"fields":{"slug":"/2022-02-09-TIL161/"},"frontmatter":{"title":"2022-02-09 TIL","tag":["TIL"],"layout":null}},"next":{"fields":{"slug":"/2019-11-18-TIL1/"},"frontmatter":{"title":"2019-11-18 TIL","tag":["TIL"],"layout":null}}}},"staticQueryHashes":["3668704128"]}