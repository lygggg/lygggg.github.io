{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-03-20-프론트엔드 인터뷰3-2/","result":{"data":{"markdownRemark":{"html":"<h2>JavaScript와 관련하여 same-origin 정책을 설명하세요.</h2>\n<p>same-origin 정책은 JavaScript 도메인 경계를 넘어서 요청하는 것을 방지합니다. origin은 URI체계, 호스트 이름, 포트 버호의 조합으로 정의됩니다. 이 정책은 한 페이지의 악의적인 스크립트가 해당 페이지의 DOM을 통해 다른 웹 페이지의 중요한 데이터에 접근하는 것을 방지합니다.</p>\n<p>즉 동일 출처 정책(same-origin 정책)은 웹 브라우저 보안을 위해 http 프로토콜, 호스트, 포트가 동일한 서버로만 ajax요청을 주고 받을 수 있도록 한 정책이다.</p>\n<h2>다음을 작동하게 만들어보세요</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,5,1,2,3,4,5]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">duplicate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//[1,2,3,4,5,1,2,3,4,5]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>왜 Ternary expression이라고 부르고, “Ternary”라는 단어는 무엇을 나타내나요?</h2>\n<p>삼항연산자는 (조건) ? {참이면 실행} : {거짓이면 실행} 으로 표현하고, Ternary는 “셋으로 이루어졌다는 뜻” 입니다.</p>\n<h2>“use strict”은 무엇인가요? 사용시 장단점이 무엇인가요?</h2>\n<p>“use strict는 전체 스크립트나 개별 함수에 엄격 모드를 사용하는데 사용되는 명령문입니다. Strict 모드는 JavaScript의 다양한 자바스크립트를 제한하는 방법입니다.</p>\n<p>장점</p>\n<ul>\n<li>실수로 전역변수를 만드는 것이 불가능 합니다.</li>\n<li>암묵적으로 실패한 예외를 throw하지 못하는 할당을 만듭니다.</li>\n<li>삭제할 수 없는 속성을 삭제하려고 시도합니다.</li>\n<li>함수의 매개변수 이름은 고유해야합니다.</li>\n<li>this는 전역 컨테스트에서 undefined입니다.</li>\n<li>예외를 발생시키는 몇 가지 일반적인 코딩을 잡아냅니다.</li>\n<li>헷갈리거나 잘 모르는 기능을 사용할 수 없게 합니다.</li>\n</ul>\n<p>단점</p>\n<ul>\n<li>일부 개발자는 익숙하지 않는 기능이 많습니다.</li>\n<li>function.caller와 function.arguments에 더이상 접근할 수 없습니다.\n<a href=\"https://geunhee0219.tistory.com/entry/%ED%95%A8%EC%88%98%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0\">https://geunhee0219.tistory.com/entry/%ED%95%A8%EC%88%98%EC%9D%98-%EB%82%B4%EB%B6%80-%EA%B5%AC%EC%A1%B0</a></li>\n<li>서로 다른 엄격한 모드로 작성된 스크립트를 병합하면 문제가 발생할 수있습니다.</li>\n</ul>\n<h2>100까지 증가하면서 3의 배수에는 fizz를 출력하고, 5의 배수에는 buzz를 출력하고, 3과 5의 배수에는 fizzbuzz를 출력하는 for loop를 만드세요.</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> f <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token operator\">=</span> i <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">?</span> <span class=\"token string\">'FizzBuzz'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'Fizz'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> b <span class=\"token operator\">?</span> <span class=\"token string\">'Buzz'</span> <span class=\"token operator\">:</span> i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"title":"[프론트엔드 인터뷰]FE-Study 3주차 2회","date":"March 16, 2022"},"id":"7179a90b-1d5d-5386-b2a2-d1ad39692302"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2022-03-20-프론트엔드 인터뷰3-2/","previous":{"fields":{"slug":"/2022-03-16-TIL184/"},"frontmatter":{"title":"[프론트엔드 인터뷰]FE-Study 3주차 1회","tag":["Study"],"layout":null}},"next":{"fields":{"slug":"/2022-03-23-프론트엔드 인터뷰4-1/"},"frontmatter":{"title":"[프론트엔드 인터뷰]FE-Study 4주차 1회","tag":["Study"],"layout":null}}}},"staticQueryHashes":["3668704128"]}