{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-03-27-TIL191/","result":{"data":{"markdownRemark":{"html":"<h2>Fact</h2>\n<ul>\n<li>성공과 실패를 결정하는 1%의 네트워크 원리 1~120페이지 읽고 스터디</li>\n<li>프론트엔트 인터뷰 핸드북 스터디</li>\n</ul>\n<h2>Feelings</h2>\n<ul>\n<li>성공과 실패를 결정하는 1%의 네트워크 원리 책을 사서 읽었는데 네트워크 엔지니어 수준의 책이라고 했는데 확실히 깊이있게 알려주는 책이였다.</li>\n<li>프론트 엔드 인터뷰도 거의 다 끝나간다 다음엔 어떤 주제로 스터디를 해볼까..</li>\n</ul>\n<h2>Findings</h2>\n<h2>오브젝트 속성이나 배열 항목을 반복할 때 사용하는 언어 구문은 무엇인가요?</h2>\n<h3>Object인 경우</h3>\n<p>for-in</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> object <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> property <span class=\"token keyword\">in</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>property<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>object<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// expected output:</span>\n<span class=\"token comment\">// \"a: 1\"</span>\n<span class=\"token comment\">// \"b: 2\"</span>\n<span class=\"token comment\">// \"C: 3\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Object.keys()</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token string\">'somestring'</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Object.getOwnPropertyNames()</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  b<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  c<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [\"a\", \"b\", \"c\"]</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>배열인 경우</h3>\n<p>for 반복</p>\n<p>forEach</p>\n<p>for-of</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> array1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> element <span class=\"token keyword\">of</span> array1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// a</span>\n<span class=\"token comment\">// b</span>\n<span class=\"token comment\">// c</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>mutable 객체와 immutable 객체 사이의 차이점을 설명하세요.</h2>\n<p>여기서 말하는 mutable(변경 가능), immutable(변경 불가능)을 원시타입? 객체 타입을 말하는건가? 라고 생각했습니다.</p>\n<p>보통 자바스크립트에서 원시타입은 변경이 불가능한 값입니다.</p>\n<ul>\n<li>Boolean</li>\n<li>null</li>\n<li>undefined</li>\n<li>Number</li>\n<li>String</li>\n<li>Symbol</li>\n</ul>\n<p>원시 타입 이외의 모든 값은 객체 타입이며 객체 타입은 변경가능한 값(mutable value)입니다.</p>\n<p>원시 타입을 예로들면</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'Hello'</span>\nstr <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>1번 라인이 실행되면 문자열 Hello가 생성되고, str은 메모리에 문자열 메모리 주소를 가리키고</p>\n<p>2번 라인이 실행되면 문자열 world가 생성되고 str은 새로운 메모리에 해당 문자열 주소를 가르킵니다.</p>\n<p>즉, 처음 선언한 메모리 주소에 있던 Hello가 변경되는 것이 아니라 각각의 메모리에 world, Hello가 할당됩니다.</p>\n<p>객체타입을 알아보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Lee'</span><span class=\"token punctuation\">,</span>\n  address<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">'Seoul'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> user2 <span class=\"token operator\">=</span> user1\n\nuser2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Kim'</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Kim</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Kim</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>객체는 값을 변경하는게 가능하기 때문에 user1, user2가 모두 같은 객체를 가리킵니다. 그렇기 때문에 user1를 변경하면 user2도 변경됩니다.</p>\n<h3>불변 데이터 패턴</h3>\n<p>의도하지 않은 객체의 변경이 발생하는 원인의 대다수는 “래퍼런스를 참조한 다른 객체에서 객체를 변경”하기 떄문입니다. 이 문제의 해결 방법은 비용이 조금 들지만 객첼르 불변 객체로 만들어 프로퍼티의 변경을 방지하며 객체의 변경이 필요한 경우에는 참조가 아닌 객체의 방어적 복사를 통해 새로운 객체를 생성한 후 변경합니다.</p>\n<h3>Object.assign</h3>\n<p>Object.assign은 타깃 객체로 소스 객체의 프로퍼티를 복사합니다. 이때 소스 객체의 프로퍼티와 동일한 프로퍼티를 가진 타겟 객체의 프로퍼티들은 소스 객체의 프로퍼티로 덮어쓰기됩니다. 리턴값으로 타깃 객체를 반환합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> o4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> o5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> o6 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> c<span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> merge2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> o4<span class=\"token punctuation\">,</span> o5<span class=\"token punctuation\">,</span> o6<span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>merge2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { a: 1, b: 2, c: 3 }</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o4<span class=\"token punctuation\">)</span> <span class=\"token comment\">// { a: 1 }</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>하지만 Object.assign은 완전한 깊은복사를 지원하지 않습니다. 객체 내부의 객체는 얇은 복사가 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> user1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'Lee'</span><span class=\"token punctuation\">,</span>\n  address<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    city<span class=\"token operator\">:</span> <span class=\"token string\">'Seoul'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> user2 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> user1<span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user1 <span class=\"token operator\">===</span> user2<span class=\"token punctuation\">)</span> <span class=\"token comment\">//false</span>\n\nuser2<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Kim'</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Lee</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Kim</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>address <span class=\"token operator\">===</span> user2<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n\nuser1<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>city <span class=\"token operator\">=</span> <span class=\"token string\">'Busan'</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user1<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Busan</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user2<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span>city<span class=\"token punctuation\">)</span> <span class=\"token comment\">//Busan</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>이것 말고도 freeze가 있는데 위에 두개는 가독성도 좋지않고, 번거롭고 성능상에 이슈가 있어서 사용하지 않는게 좋다. 그래서 대안으로는</p>\n<p>Facebook이 제공하는 Immutable.js를 사용하는 방법이 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\">npm install immutable\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> Map <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"immutable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> map1 <span class=\"token operator\">=</span> <span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> map2 <span class=\"token operator\">=</span> map1<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nmap1<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span>\nmap2<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 50</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>동기, 비동기 함수의 차이점을 설명하세요.</h2>\n<p>동기 함수는 블로킹인 반면, 비동기 함수는 그렇지 않습니다. 동기 함수에서는 다음 명령문이 실행되기 전에 앞 명령문이 완료됩니다. 이 경우, 프로그램은 명령문의 순서대로 정확하게 평가되고 명령문 중 하나가 매우 오랜시간이 걸리면 프로그램 실행이 명령문이 끝날때 까지 일시중지 하게됩니다.</p>\n<p>하지만 비동기 함수는 함수가 호출된 후 즉시 다음줄 실행이 계속됩니다. 비동기 작업이 완료되고 호출 스태이 비어있을때만 완료된 작업을 호출합니다.</p>\n<p><a href=\"https://it-eldorado.tistory.com/86?category=749286\">https://it-eldorado.tistory.com/86?category=749286</a></p>\n<h2>이벤트 루프란 무엇인가요? 콜스택과 테스크 큐의 차이점은 무엇인가요?</h2>\n<p>테스크 큐에서 수행할 작업이 있는지 확인하는 단일 스레드 루프입니다. 콜 스택이 비어있고, 테스크 큐에 콜백 함수가 있는 경우, 함수는 큐에서 제거되고 실행될 콜 스택으로 푸시됩니다.</p>\n<h2>function foo() {} 와 var foo = function() {} 사이에서 foo 사용의 차이에 대해 설명하세요.</h2>\n<p>function foo() {}는 함수 선언식이고, var foo = function() {}는 함수 표현식입니다. 차이점은 함수 선언식은 호이스팅이 되지만, 함수 표현식은 함수를 담은 변수만 호이스팅이 되고, 그 함수는 호이스팅이 되지 않습니다.</p>\n<h2>Future Action</h2>\n<ul>\n<li>새로운 스터디 주제 찾아서 함께 스터디하기!</li>\n</ul>","frontmatter":{"title":"2022-03-27 TIL","date":"March 27, 2022"},"id":"00c1bc2b-630c-5daf-a964-f3370a6e4ed5"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2022-03-27-TIL191/","previous":{"fields":{"slug":"/2022-03-24-TIL190/"},"frontmatter":{"title":"2022-03-24 TIL","tag":["TIL"],"layout":null}},"next":{"fields":{"slug":"/2022-04-06-TIL192/"},"frontmatter":{"title":"2022-04-06 TIL","tag":["TIL"],"layout":null}}}},"staticQueryHashes":["3668704128"]}