{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020-04-30-TIL86/","result":{"data":{"markdownRemark":{"html":"<h2>Facts</h2>\n<ul>\n<li>오늘 서버 배포를 완료했다.</li>\n<li>최소거리 탐색을 구현했다.</li>\n</ul>\n<h2>Feelings</h2>\n<ul>\n<li>서버쪽은 정말 문제가 생기면 감으로 맞출수 없다는 것을 느꼈다.</li>\n<li>원인을 찾고 찾아서 공부하고 문제를 해결하는 연습의 필요성을 느꼈다.</li>\n</ul>\n<h2>Findings</h2>\n<ul>\n<li>Docker network를 쓰는 이유는 docker container는 매번 실행될 때마다 변동되는 vip를 사용하는데, 처음 설정한 vip(하나의 호스트에 여러 개의 IP주소)가 다음 번 생성된 container를 호출한다는 보장이 없다. 컨테이너가 매번 새로 실행되더라도 유지하게 하려면 같은 네트워크에 묶어주어야 하기 때문이다.</li>\n</ul>\n<p>-DNS란 Domain Name System을 뜻하며 사람이 읽을 수 있는 도메인 이름 (www.amazon.com)을 말합니다.</p>\n<ul>\n<li>동일 출처 정책(Same-Origin Policy) 이 정책에 의해서 자바스크립트로 다른 웹페이지에 접근할 때는 같은 출처의 페이지에만 접근이 가능하다. 같은 출처라는 것은 프로토콜, 호스트명, 포트가 같다는 것을 의미한다. 즉 쉽게 말하면 웹페이지의 스크립트는 그 페이지와 같은 서버에 있는 주소로만 ajax 요청을 할 수 있다는 것이다.</li>\n<li>CORS는 웹 브라우저에서 외부 도메인 서버와 통신하기 위한 방식을 표준화한 스펙이다. 서버와 클라이언트가 정해진 헤더를 통해 서로 요청이나 응답에 반응할지 결정하는 방식으로 교차 출처 자원 공유라는 이름으로 표준화가 되었다.</li>\n<li>CORS는 HTTP 헤더를 사용해서, 한 출처에서 실행 중인 웹 애플리케이션이 다른 출처의 선택한 자원에 접근할 수 있는 권한을 부여하도록 브라우저에 알려주는 제체입니다.</li>\n</ul>\n<h2>Future Action Plan</h2>\n<ul>\n<li>Access-Control-Allow-Origin 헤더, withCredentials 공부</li>\n<li>반응형 웹 완성하기</li>\n<li>자기소개서 쓰기</li>\n</ul>","frontmatter":{"title":"2020-04-30 TIL","date":"April 30, 2020"},"id":"c8206fa6-ee1f-5638-8c66-be0c22ae9341"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"Your Disqus-short-name here"}}}},"pageContext":{"slug":"/2020-04-30-TIL86/","previous":{"fields":{"slug":"/2020-04-28-TIL85/"},"frontmatter":{"title":"2020-04-28 TIL","tag":["TIL"],"layout":null}},"next":{"fields":{"slug":"/2020-05-01-TIL87/"},"frontmatter":{"title":"2020-05-01 TIL","tag":["TIL"],"layout":null}}}},"staticQueryHashes":["3668704128"]}