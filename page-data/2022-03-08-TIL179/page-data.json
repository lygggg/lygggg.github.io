{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022-03-08-TIL179/","result":{"data":{"markdownRemark":{"html":"<h2>호스트 객체와 내장 객체의 차이점은 무엇인가요?</h2>\n<p>내장 객체는 ECMAScript 사양에 정의된 javaScript 언어의 일부인 객체입니다. 예를들어 String, Math, RegExp, Object, Function등이 있습니다. 내장 객체는 애플리케이션의 환경과 관계없이 언제나 사용할 수 있습니다.</p>\n<p>호스트 객체는 실행환경에서 제공하는 객체이고, 내장 객체가 아닌 객체는 모두 호스트 객체입니다. 예를들어 window, XmlHttpRequest, HTMLElement 등의 DOM 노드 객체와 같이 호스트 환경에 정의된 객체를 말합니다.</p>\n<h2>function Person(){}, var person = Person(), var person = new Person()의 차이점은 무엇인가요?</h2>\n<p><code class=\"language-text\">function Person(){}</code>은 정상적인 일반 함수 선언식이고, <code class=\"language-text\">var person = Person()</code>은 생성자가 아니라 Person을 함수로 호출합니다. 함수를 생성자로 사용하려면 new 키워드를 필히 붙여주어야합니다. 일반 함수처럼 생성자를 호출하면 undefined가 반환되고 지정된 변수에 할당됩니다. 그리고 <code class=\"language-text\">var person = new Person()은 Person.prototype</code>을 상속받은 new 연산자를 사용하여 Person 객체의 인스턴스를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: Cannot read property 'name' of undefined</span>\n\n<span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Person { name: \"John\" }</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"John\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>.call과 .apply의 차이점은 무엇인가요?</h2>\n<p>.call과 .apply는 모두 함수를 호출하는데 사용되며, 첫 번째 매개변수는 함수 내에서 this의 값으로 사용됩니다. 그러나 .call은 쉼표로 구분된 인수를 두번째 인수로 취하고, .apply는 인수의 배열을 두 번째 인수로 취합니다.</p>\n<h2>Function.prototype.bind에 대해 설명하세요.</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-tsx line-numbers\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Tom'</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">city</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, I live in </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>city<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> boundSay <span class=\"token operator\">=</span> <span class=\"token function\">say</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token function\">boundSay</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seoul'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello, my name is Tom, I live in seoul</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>bind 함수가 call, apply 와 다른 점은 함수를 실행하지 않는다는 점입니다. 대신 함수를 리턴합니다. 위 코드에서 boundSay 함수는 이제부터 this를 obj로 갖고 있기 때문에 나중에 사용이 가능합니다. bind에 사용하는 나머지 rest 파라미터는 call과 apply와 동일합니다.</p>\n<h2>언제 document.write()를 사용하나요?</h2>\n<p>자바스크립트 document.write() 를 사용하면 화면에 직접 데이터를 출력할 수 있습니다. 출력되는 데이터는 문자열이 될 수 있고, 데이터객체 정보가 될 수 있습니다. 기능적으로는 전혀 문제가 되지 않지만, 사용상 주의가 필요한 함수입니다. 자바스크립트가 처음 등장했을 때는 데이터 값의 확인이나 디버그 등에 많이 활용되기도 하였습니다.</p>\n<p>하지만 웹 페이지의 모든 내용이 로딩된 후에 document.write()메소드가 실행되면, 웹 페이지 내에 먼저 로딩된 모든 데이터를 지우고 자신의 데이터를 출력하게 됩니다. 따라서 document.write() 메소드를 테스트 이외의 용도로 사용할 때에는 충분히 주의해서 사용해야 합니다.</p>\n<p><a href=\"http://www.tcpschool.com/javascript/js_intro_output\">http://www.tcpschool.com/javascript/js_intro_output</a></p>","frontmatter":{"title":"[프론트엔드 인터뷰]FE-Study 2주차 1회","date":"March 08, 2022"},"id":"692d2345-781e-5a4b-be4a-3c3cb5ffc2a8"},"site":{"siteMetadata":{"title":"YoungGyu Blog","siteUrl":"http://answer.netlify.app","comment":{"disqusShortName":"lyg"}}}},"pageContext":{"slug":"/2022-03-08-TIL179/","previous":{"fields":{"slug":"/2022-03-05-TIL179/"},"frontmatter":{"title":"[프론트엔드 인터뷰]FE-Study 1주차 2회","tag":["Study"],"layout":null}},"next":{"fields":{"slug":"/2019-12-22-study1_1/"},"frontmatter":{"title":"웹을 지탱하는 기술 스터디 1회차","tag":["Study"],"layout":null}}}},"staticQueryHashes":["3668704128"]}